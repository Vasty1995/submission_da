
DA4BT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000778  0000080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800136  00800136  00000842  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d2  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082a  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ad  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000224  00000000  00000000  00002401  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  9e:	0c 94 ba 03 	jmp	0x774	; 0x774 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART0_sendChar>:
 * Procedure to send a single character over USART0. If character is linefeed, reset 
 * line. 
 * Assumes ASCII code. 
 */ 
{
	if(data == '\n')	// If character is linefeed,
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	41 f4       	brne	.+16     	; 0xba <USART0_sendChar+0x14>
	{					// First send return.
		while(! (UCSR0A & (1<<UDRE0)) );
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	95 ff       	sbrs	r25, 5
  b2:	fd cf       	rjmp	.-6      	; 0xae <USART0_sendChar+0x8>
		UDR0 = '\r';
  b4:	9d e0       	ldi	r25, 0x0D	; 13
  b6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
	while(! (UCSR0A & (1<<UDRE0)) ); // Wait for last data to be transmitted.
  ba:	e0 ec       	ldi	r30, 0xC0	; 192
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	90 81       	ld	r25, Z
  c0:	95 ff       	sbrs	r25, 5
  c2:	fd cf       	rjmp	.-6      	; 0xbe <USART0_sendChar+0x18>
	UDR0 = data;	// send data
  c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret

000000ce <usart0_init>:
/*
 * Procedure to initialize USART0 asynchronous with enabled RX/TX, 8 bit data,
 * no parity, and 1 stop bit. 
*/
{
	UCSR0B = (1<<TXEN0)  | (1<<RXEN0);	// enable transmit/receive
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	// asynchronous, 8N1
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0L = ASYNCH_NORM_PRESCALER;		// Set prescaler based on desired baudrate
  da:	83 e3       	ldi	r24, 0x33	; 51
  dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e0:	08 95       	ret

000000e2 <rotateLeft>:
{
	unsigned char shiftIn = 0;
	if ((x & 0x80) == 0x80)
		shiftIn = 0x01;
	return ((x<<1) | shiftIn);
}
  e2:	88 0f       	add	r24, r24
  e4:	81 1d       	adc	r24, r1
  e6:	08 95       	ret

000000e8 <readADC>:
}

unsigned short readADC()
// readADC will read the adcValue after it has been calculated.
{
	ADCSRA |= (1<<ADSC);				// Begin conversion
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF)) == 0 );	// Wait for conversion to finish.
  f2:	80 81       	ld	r24, Z
  f4:	84 ff       	sbrs	r24, 4
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <readADC+0xa>
	return ADC;
  f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  fc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 100:	08 95       	ret

00000102 <ADC0init>:

void ADC0init()
// ADC0init will initialize analog input on ADC0, set voltage reference to Vcc, with
// data right justified on data register.
{
	DDRC	&= ~(0<<DDC0);
 102:	87 b1       	in	r24, 0x07	; 7
 104:	87 b9       	out	0x07, r24	; 7
	ADCSRA	= 0x87;			// Make ADC enable and select ck/128
 106:	87 e8       	ldi	r24, 0x87	; 135
 108:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX	= (1<<REFS0);	// VCC reference, ADC0 single ended input
 10c:	80 e4       	ldi	r24, 0x40	; 64
 10e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 112:	08 95       	ret

00000114 <delay_ms>:
 * since the _delay_ms macro will not accept parameters 
 * other than constant values. 
 */
{
	int i;
	for(i = 0; i < count; i++)
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	69 f0       	breq	.+26     	; 0x132 <delay_ms+0x1e>
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	ef ec       	ldi	r30, 0xCF	; 207
 11e:	f7 e0       	ldi	r31, 0x07	; 7
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <delay_ms+0xc>
 124:	00 c0       	rjmp	.+0      	; 0x126 <delay_ms+0x12>
 126:	00 00       	nop
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
 12c:	28 17       	cp	r18, r24
 12e:	39 07       	cpc	r19, r25
 130:	a9 f7       	brne	.-22     	; 0x11c <delay_ms+0x8>
 132:	08 95       	ret

00000134 <step_clockwise>:
/*
 * Given the unsigned integers steps, and delay, step_clockwise will send the appropriate
 * signal to PORTB[7:0] to step a stepper motor in the clockwise direction. 
 * A global variable positionSig must be initialized to 0x33.
 */ 
{
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	8b 01       	movw	r16, r22
	for (; steps > 0; steps--)	// loop steps times. 
 140:	89 2b       	or	r24, r25
 142:	61 f0       	breq	.+24     	; 0x15c <step_clockwise+0x28>
	{
		positionSig = rotateLeft(positionSig);	// Rotate value of positionSig
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 148:	0e 94 71 00 	call	0xe2	; 0xe2 <rotateLeft>
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PORTB = positionSig;					// send data to PORTB
 150:	85 b9       	out	0x05, r24	; 5
		delay_ms(delay);						// Delay a given value of milliseconds. 
 152:	c8 01       	movw	r24, r16
 154:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
 * Given the unsigned integers steps, and delay, step_clockwise will send the appropriate
 * signal to PORTB[7:0] to step a stepper motor in the clockwise direction. 
 * A global variable positionSig must be initialized to 0x33.
 */ 
{
	for (; steps > 0; steps--)	// loop steps times. 
 158:	21 97       	sbiw	r28, 0x01	; 1
 15a:	a1 f7       	brne	.-24     	; 0x144 <step_clockwise+0x10>
	{
		positionSig = rotateLeft(positionSig);	// Rotate value of positionSig
		PORTB = positionSig;					// send data to PORTB
		delay_ms(delay);						// Delay a given value of milliseconds. 
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	08 95       	ret

00000166 <main>:
unsigned char positionSig = 0x33;

int main()
{
 	unsigned short adcVal;
	DDRB = 0xFF; // make portB output pins.
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	84 b9       	out	0x04, r24	; 4

	stdout = &USART0_stream;	// change standard output to point to a USART stream
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__data_end+0x3>
 172:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end+0x2>
	
	usart0_init();				// Initialize USART0 for debugging and monitoring
 176:	0e 94 67 00 	call	0xce	; 0xce <usart0_init>
	ADC0init();					// Initialize ADC0 input
 17a:	0e 94 81 00 	call	0x102	; 0x102 <ADC0init>
	
	while (1)
	{
 		adcVal = readADC();			// read ADC0;
		step_clockwise(1, adcVal);	// Step stepper motor 1 step with an adcVal delay
		printf("ADC Value: %u | Position signal: 0x%X\n", adcVal, positionSig); // print monitoring message
 17e:	0f e0       	ldi	r16, 0x0F	; 15
 180:	11 e0       	ldi	r17, 0x01	; 1
	usart0_init();				// Initialize USART0 for debugging and monitoring
	ADC0init();					// Initialize ADC0 input
	
	while (1)
	{
 		adcVal = readADC();			// read ADC0;
 182:	0e 94 74 00 	call	0xe8	; 0xe8 <readADC>
 186:	c8 2f       	mov	r28, r24
 188:	d9 2f       	mov	r29, r25
		step_clockwise(1, adcVal);	// Step stepper motor 1 step with an adcVal delay
 18a:	68 2f       	mov	r22, r24
 18c:	79 2f       	mov	r23, r25
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 9a 00 	call	0x134	; 0x134 <step_clockwise>
		printf("ADC Value: %u | Position signal: 0x%X\n", adcVal, positionSig); // print monitoring message
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19a:	1f 92       	push	r1
 19c:	8f 93       	push	r24
 19e:	df 93       	push	r29
 1a0:	cf 93       	push	r28
 1a2:	1f 93       	push	r17
 1a4:	0f 93       	push	r16
 1a6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <printf>
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	e5 cf       	rjmp	.-54     	; 0x182 <main+0x1c>

000001b8 <printf>:
 1b8:	a0 e0       	ldi	r26, 0x00	; 0
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	e2 ee       	ldi	r30, 0xE2	; 226
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	0c 94 93 03 	jmp	0x726	; 0x726 <__prologue_saves__+0x20>
 1c4:	ae 01       	movw	r20, r28
 1c6:	4b 5f       	subi	r20, 0xFB	; 251
 1c8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ca:	fa 01       	movw	r30, r20
 1cc:	61 91       	ld	r22, Z+
 1ce:	71 91       	ld	r23, Z+
 1d0:	af 01       	movw	r20, r30
 1d2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end+0x2>
 1d6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x3>
 1da:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <vfprintf>
 1de:	e2 e0       	ldi	r30, 0x02	; 2
 1e0:	0c 94 af 03 	jmp	0x75e	; 0x75e <__epilogue_restores__+0x20>

000001e4 <vfprintf>:
 1e4:	ab e0       	ldi	r26, 0x0B	; 11
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e8 ef       	ldi	r30, 0xF8	; 248
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	0c 94 83 03 	jmp	0x706	; 0x706 <__prologue_saves__>
 1f0:	6c 01       	movw	r12, r24
 1f2:	7b 01       	movw	r14, r22
 1f4:	8a 01       	movw	r16, r20
 1f6:	fc 01       	movw	r30, r24
 1f8:	17 82       	std	Z+7, r1	; 0x07
 1fa:	16 82       	std	Z+6, r1	; 0x06
 1fc:	83 81       	ldd	r24, Z+3	; 0x03
 1fe:	81 ff       	sbrs	r24, 1
 200:	cc c1       	rjmp	.+920    	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 202:	ce 01       	movw	r24, r28
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	3c 01       	movw	r6, r24
 208:	f6 01       	movw	r30, r12
 20a:	93 81       	ldd	r25, Z+3	; 0x03
 20c:	f7 01       	movw	r30, r14
 20e:	93 fd       	sbrc	r25, 3
 210:	85 91       	lpm	r24, Z+
 212:	93 ff       	sbrs	r25, 3
 214:	81 91       	ld	r24, Z+
 216:	7f 01       	movw	r14, r30
 218:	88 23       	and	r24, r24
 21a:	09 f4       	brne	.+2      	; 0x21e <vfprintf+0x3a>
 21c:	ba c1       	rjmp	.+884    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 21e:	85 32       	cpi	r24, 0x25	; 37
 220:	39 f4       	brne	.+14     	; 0x230 <vfprintf+0x4c>
 222:	93 fd       	sbrc	r25, 3
 224:	85 91       	lpm	r24, Z+
 226:	93 ff       	sbrs	r25, 3
 228:	81 91       	ld	r24, Z+
 22a:	7f 01       	movw	r14, r30
 22c:	85 32       	cpi	r24, 0x25	; 37
 22e:	29 f4       	brne	.+10     	; 0x23a <vfprintf+0x56>
 230:	b6 01       	movw	r22, r12
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 238:	e7 cf       	rjmp	.-50     	; 0x208 <vfprintf+0x24>
 23a:	91 2c       	mov	r9, r1
 23c:	21 2c       	mov	r2, r1
 23e:	31 2c       	mov	r3, r1
 240:	ff e1       	ldi	r31, 0x1F	; 31
 242:	f3 15       	cp	r31, r3
 244:	d8 f0       	brcs	.+54     	; 0x27c <vfprintf+0x98>
 246:	8b 32       	cpi	r24, 0x2B	; 43
 248:	79 f0       	breq	.+30     	; 0x268 <vfprintf+0x84>
 24a:	38 f4       	brcc	.+14     	; 0x25a <vfprintf+0x76>
 24c:	80 32       	cpi	r24, 0x20	; 32
 24e:	79 f0       	breq	.+30     	; 0x26e <vfprintf+0x8a>
 250:	83 32       	cpi	r24, 0x23	; 35
 252:	a1 f4       	brne	.+40     	; 0x27c <vfprintf+0x98>
 254:	23 2d       	mov	r18, r3
 256:	20 61       	ori	r18, 0x10	; 16
 258:	1d c0       	rjmp	.+58     	; 0x294 <vfprintf+0xb0>
 25a:	8d 32       	cpi	r24, 0x2D	; 45
 25c:	61 f0       	breq	.+24     	; 0x276 <vfprintf+0x92>
 25e:	80 33       	cpi	r24, 0x30	; 48
 260:	69 f4       	brne	.+26     	; 0x27c <vfprintf+0x98>
 262:	23 2d       	mov	r18, r3
 264:	21 60       	ori	r18, 0x01	; 1
 266:	16 c0       	rjmp	.+44     	; 0x294 <vfprintf+0xb0>
 268:	83 2d       	mov	r24, r3
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	38 2e       	mov	r3, r24
 26e:	e3 2d       	mov	r30, r3
 270:	e4 60       	ori	r30, 0x04	; 4
 272:	3e 2e       	mov	r3, r30
 274:	2a c0       	rjmp	.+84     	; 0x2ca <vfprintf+0xe6>
 276:	f3 2d       	mov	r31, r3
 278:	f8 60       	ori	r31, 0x08	; 8
 27a:	1d c0       	rjmp	.+58     	; 0x2b6 <vfprintf+0xd2>
 27c:	37 fc       	sbrc	r3, 7
 27e:	2d c0       	rjmp	.+90     	; 0x2da <vfprintf+0xf6>
 280:	20 ed       	ldi	r18, 0xD0	; 208
 282:	28 0f       	add	r18, r24
 284:	2a 30       	cpi	r18, 0x0A	; 10
 286:	40 f0       	brcs	.+16     	; 0x298 <vfprintf+0xb4>
 288:	8e 32       	cpi	r24, 0x2E	; 46
 28a:	b9 f4       	brne	.+46     	; 0x2ba <vfprintf+0xd6>
 28c:	36 fc       	sbrc	r3, 6
 28e:	81 c1       	rjmp	.+770    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 290:	23 2d       	mov	r18, r3
 292:	20 64       	ori	r18, 0x40	; 64
 294:	32 2e       	mov	r3, r18
 296:	19 c0       	rjmp	.+50     	; 0x2ca <vfprintf+0xe6>
 298:	36 fe       	sbrs	r3, 6
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <vfprintf+0xc4>
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	98 9e       	mul	r9, r24
 2a0:	20 0d       	add	r18, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	92 2e       	mov	r9, r18
 2a6:	11 c0       	rjmp	.+34     	; 0x2ca <vfprintf+0xe6>
 2a8:	ea e0       	ldi	r30, 0x0A	; 10
 2aa:	2e 9e       	mul	r2, r30
 2ac:	20 0d       	add	r18, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	22 2e       	mov	r2, r18
 2b2:	f3 2d       	mov	r31, r3
 2b4:	f0 62       	ori	r31, 0x20	; 32
 2b6:	3f 2e       	mov	r3, r31
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <vfprintf+0xe6>
 2ba:	8c 36       	cpi	r24, 0x6C	; 108
 2bc:	21 f4       	brne	.+8      	; 0x2c6 <vfprintf+0xe2>
 2be:	83 2d       	mov	r24, r3
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	38 2e       	mov	r3, r24
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <vfprintf+0xe6>
 2c6:	88 36       	cpi	r24, 0x68	; 104
 2c8:	41 f4       	brne	.+16     	; 0x2da <vfprintf+0xf6>
 2ca:	f7 01       	movw	r30, r14
 2cc:	93 fd       	sbrc	r25, 3
 2ce:	85 91       	lpm	r24, Z+
 2d0:	93 ff       	sbrs	r25, 3
 2d2:	81 91       	ld	r24, Z+
 2d4:	7f 01       	movw	r14, r30
 2d6:	81 11       	cpse	r24, r1
 2d8:	b3 cf       	rjmp	.-154    	; 0x240 <vfprintf+0x5c>
 2da:	98 2f       	mov	r25, r24
 2dc:	9f 7d       	andi	r25, 0xDF	; 223
 2de:	95 54       	subi	r25, 0x45	; 69
 2e0:	93 30       	cpi	r25, 0x03	; 3
 2e2:	28 f4       	brcc	.+10     	; 0x2ee <vfprintf+0x10a>
 2e4:	0c 5f       	subi	r16, 0xFC	; 252
 2e6:	1f 4f       	sbci	r17, 0xFF	; 255
 2e8:	9f e3       	ldi	r25, 0x3F	; 63
 2ea:	99 83       	std	Y+1, r25	; 0x01
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <vfprintf+0x124>
 2ee:	83 36       	cpi	r24, 0x63	; 99
 2f0:	31 f0       	breq	.+12     	; 0x2fe <vfprintf+0x11a>
 2f2:	83 37       	cpi	r24, 0x73	; 115
 2f4:	71 f0       	breq	.+28     	; 0x312 <vfprintf+0x12e>
 2f6:	83 35       	cpi	r24, 0x53	; 83
 2f8:	09 f0       	breq	.+2      	; 0x2fc <vfprintf+0x118>
 2fa:	59 c0       	rjmp	.+178    	; 0x3ae <vfprintf+0x1ca>
 2fc:	21 c0       	rjmp	.+66     	; 0x340 <vfprintf+0x15c>
 2fe:	f8 01       	movw	r30, r16
 300:	80 81       	ld	r24, Z
 302:	89 83       	std	Y+1, r24	; 0x01
 304:	0e 5f       	subi	r16, 0xFE	; 254
 306:	1f 4f       	sbci	r17, 0xFF	; 255
 308:	88 24       	eor	r8, r8
 30a:	83 94       	inc	r8
 30c:	91 2c       	mov	r9, r1
 30e:	53 01       	movw	r10, r6
 310:	13 c0       	rjmp	.+38     	; 0x338 <vfprintf+0x154>
 312:	28 01       	movw	r4, r16
 314:	f2 e0       	ldi	r31, 0x02	; 2
 316:	4f 0e       	add	r4, r31
 318:	51 1c       	adc	r5, r1
 31a:	f8 01       	movw	r30, r16
 31c:	a0 80       	ld	r10, Z
 31e:	b1 80       	ldd	r11, Z+1	; 0x01
 320:	36 fe       	sbrs	r3, 6
 322:	03 c0       	rjmp	.+6      	; 0x32a <vfprintf+0x146>
 324:	69 2d       	mov	r22, r9
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <vfprintf+0x14a>
 32a:	6f ef       	ldi	r22, 0xFF	; 255
 32c:	7f ef       	ldi	r23, 0xFF	; 255
 32e:	c5 01       	movw	r24, r10
 330:	0e 94 de 02 	call	0x5bc	; 0x5bc <strnlen>
 334:	4c 01       	movw	r8, r24
 336:	82 01       	movw	r16, r4
 338:	f3 2d       	mov	r31, r3
 33a:	ff 77       	andi	r31, 0x7F	; 127
 33c:	3f 2e       	mov	r3, r31
 33e:	16 c0       	rjmp	.+44     	; 0x36c <vfprintf+0x188>
 340:	28 01       	movw	r4, r16
 342:	22 e0       	ldi	r18, 0x02	; 2
 344:	42 0e       	add	r4, r18
 346:	51 1c       	adc	r5, r1
 348:	f8 01       	movw	r30, r16
 34a:	a0 80       	ld	r10, Z
 34c:	b1 80       	ldd	r11, Z+1	; 0x01
 34e:	36 fe       	sbrs	r3, 6
 350:	03 c0       	rjmp	.+6      	; 0x358 <vfprintf+0x174>
 352:	69 2d       	mov	r22, r9
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <vfprintf+0x178>
 358:	6f ef       	ldi	r22, 0xFF	; 255
 35a:	7f ef       	ldi	r23, 0xFF	; 255
 35c:	c5 01       	movw	r24, r10
 35e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <strnlen_P>
 362:	4c 01       	movw	r8, r24
 364:	f3 2d       	mov	r31, r3
 366:	f0 68       	ori	r31, 0x80	; 128
 368:	3f 2e       	mov	r3, r31
 36a:	82 01       	movw	r16, r4
 36c:	33 fc       	sbrc	r3, 3
 36e:	1b c0       	rjmp	.+54     	; 0x3a6 <vfprintf+0x1c2>
 370:	82 2d       	mov	r24, r2
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	88 16       	cp	r8, r24
 376:	99 06       	cpc	r9, r25
 378:	b0 f4       	brcc	.+44     	; 0x3a6 <vfprintf+0x1c2>
 37a:	b6 01       	movw	r22, r12
 37c:	80 e2       	ldi	r24, 0x20	; 32
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 384:	2a 94       	dec	r2
 386:	f4 cf       	rjmp	.-24     	; 0x370 <vfprintf+0x18c>
 388:	f5 01       	movw	r30, r10
 38a:	37 fc       	sbrc	r3, 7
 38c:	85 91       	lpm	r24, Z+
 38e:	37 fe       	sbrs	r3, 7
 390:	81 91       	ld	r24, Z+
 392:	5f 01       	movw	r10, r30
 394:	b6 01       	movw	r22, r12
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 39c:	21 10       	cpse	r2, r1
 39e:	2a 94       	dec	r2
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	82 1a       	sub	r8, r18
 3a4:	91 08       	sbc	r9, r1
 3a6:	81 14       	cp	r8, r1
 3a8:	91 04       	cpc	r9, r1
 3aa:	71 f7       	brne	.-36     	; 0x388 <vfprintf+0x1a4>
 3ac:	e8 c0       	rjmp	.+464    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 3ae:	84 36       	cpi	r24, 0x64	; 100
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <vfprintf+0x1d2>
 3b2:	89 36       	cpi	r24, 0x69	; 105
 3b4:	41 f5       	brne	.+80     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3b6:	f8 01       	movw	r30, r16
 3b8:	37 fe       	sbrs	r3, 7
 3ba:	07 c0       	rjmp	.+14     	; 0x3ca <vfprintf+0x1e6>
 3bc:	60 81       	ld	r22, Z
 3be:	71 81       	ldd	r23, Z+1	; 0x01
 3c0:	82 81       	ldd	r24, Z+2	; 0x02
 3c2:	93 81       	ldd	r25, Z+3	; 0x03
 3c4:	0c 5f       	subi	r16, 0xFC	; 252
 3c6:	1f 4f       	sbci	r17, 0xFF	; 255
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <vfprintf+0x1f6>
 3ca:	60 81       	ld	r22, Z
 3cc:	71 81       	ldd	r23, Z+1	; 0x01
 3ce:	07 2e       	mov	r0, r23
 3d0:	00 0c       	add	r0, r0
 3d2:	88 0b       	sbc	r24, r24
 3d4:	99 0b       	sbc	r25, r25
 3d6:	0e 5f       	subi	r16, 0xFE	; 254
 3d8:	1f 4f       	sbci	r17, 0xFF	; 255
 3da:	f3 2d       	mov	r31, r3
 3dc:	ff 76       	andi	r31, 0x6F	; 111
 3de:	3f 2e       	mov	r3, r31
 3e0:	97 ff       	sbrs	r25, 7
 3e2:	09 c0       	rjmp	.+18     	; 0x3f6 <vfprintf+0x212>
 3e4:	90 95       	com	r25
 3e6:	80 95       	com	r24
 3e8:	70 95       	com	r23
 3ea:	61 95       	neg	r22
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255
 3ee:	8f 4f       	sbci	r24, 0xFF	; 255
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	f0 68       	ori	r31, 0x80	; 128
 3f4:	3f 2e       	mov	r3, r31
 3f6:	2a e0       	ldi	r18, 0x0A	; 10
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	a3 01       	movw	r20, r6
 3fc:	0e 94 25 03 	call	0x64a	; 0x64a <__ultoa_invert>
 400:	88 2e       	mov	r8, r24
 402:	86 18       	sub	r8, r6
 404:	45 c0       	rjmp	.+138    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 406:	85 37       	cpi	r24, 0x75	; 117
 408:	31 f4       	brne	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40a:	23 2d       	mov	r18, r3
 40c:	2f 7e       	andi	r18, 0xEF	; 239
 40e:	b2 2e       	mov	r11, r18
 410:	2a e0       	ldi	r18, 0x0A	; 10
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	25 c0       	rjmp	.+74     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 416:	93 2d       	mov	r25, r3
 418:	99 7f       	andi	r25, 0xF9	; 249
 41a:	b9 2e       	mov	r11, r25
 41c:	8f 36       	cpi	r24, 0x6F	; 111
 41e:	c1 f0       	breq	.+48     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 420:	18 f4       	brcc	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 422:	88 35       	cpi	r24, 0x58	; 88
 424:	79 f0       	breq	.+30     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 426:	b5 c0       	rjmp	.+362    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 428:	80 37       	cpi	r24, 0x70	; 112
 42a:	19 f0       	breq	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42c:	88 37       	cpi	r24, 0x78	; 120
 42e:	21 f0       	breq	.+8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 430:	b0 c0       	rjmp	.+352    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 432:	e9 2f       	mov	r30, r25
 434:	e0 61       	ori	r30, 0x10	; 16
 436:	be 2e       	mov	r11, r30
 438:	b4 fe       	sbrs	r11, 4
 43a:	0d c0       	rjmp	.+26     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 43c:	fb 2d       	mov	r31, r11
 43e:	f4 60       	ori	r31, 0x04	; 4
 440:	bf 2e       	mov	r11, r31
 442:	09 c0       	rjmp	.+18     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 444:	34 fe       	sbrs	r3, 4
 446:	0a c0       	rjmp	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 448:	29 2f       	mov	r18, r25
 44a:	26 60       	ori	r18, 0x06	; 6
 44c:	b2 2e       	mov	r11, r18
 44e:	06 c0       	rjmp	.+12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 450:	28 e0       	ldi	r18, 0x08	; 8
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	05 c0       	rjmp	.+10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 456:	20 e1       	ldi	r18, 0x10	; 16
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45c:	20 e1       	ldi	r18, 0x10	; 16
 45e:	32 e0       	ldi	r19, 0x02	; 2
 460:	f8 01       	movw	r30, r16
 462:	b7 fe       	sbrs	r11, 7
 464:	07 c0       	rjmp	.+14     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 466:	60 81       	ld	r22, Z
 468:	71 81       	ldd	r23, Z+1	; 0x01
 46a:	82 81       	ldd	r24, Z+2	; 0x02
 46c:	93 81       	ldd	r25, Z+3	; 0x03
 46e:	0c 5f       	subi	r16, 0xFC	; 252
 470:	1f 4f       	sbci	r17, 0xFF	; 255
 472:	06 c0       	rjmp	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 474:	60 81       	ld	r22, Z
 476:	71 81       	ldd	r23, Z+1	; 0x01
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 5f       	subi	r16, 0xFE	; 254
 47e:	1f 4f       	sbci	r17, 0xFF	; 255
 480:	a3 01       	movw	r20, r6
 482:	0e 94 25 03 	call	0x64a	; 0x64a <__ultoa_invert>
 486:	88 2e       	mov	r8, r24
 488:	86 18       	sub	r8, r6
 48a:	fb 2d       	mov	r31, r11
 48c:	ff 77       	andi	r31, 0x7F	; 127
 48e:	3f 2e       	mov	r3, r31
 490:	36 fe       	sbrs	r3, 6
 492:	0d c0       	rjmp	.+26     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 494:	23 2d       	mov	r18, r3
 496:	2e 7f       	andi	r18, 0xFE	; 254
 498:	a2 2e       	mov	r10, r18
 49a:	89 14       	cp	r8, r9
 49c:	58 f4       	brcc	.+22     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 49e:	34 fe       	sbrs	r3, 4
 4a0:	0b c0       	rjmp	.+22     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a2:	32 fc       	sbrc	r3, 2
 4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a6:	83 2d       	mov	r24, r3
 4a8:	8e 7e       	andi	r24, 0xEE	; 238
 4aa:	a8 2e       	mov	r10, r24
 4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4ae:	b8 2c       	mov	r11, r8
 4b0:	a3 2c       	mov	r10, r3
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b4:	b8 2c       	mov	r11, r8
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	b9 2c       	mov	r11, r9
 4ba:	a4 fe       	sbrs	r10, 4
 4bc:	0f c0       	rjmp	.+30     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4be:	fe 01       	movw	r30, r28
 4c0:	e8 0d       	add	r30, r8
 4c2:	f1 1d       	adc	r31, r1
 4c4:	80 81       	ld	r24, Z
 4c6:	80 33       	cpi	r24, 0x30	; 48
 4c8:	21 f4       	brne	.+8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4ca:	9a 2d       	mov	r25, r10
 4cc:	99 7e       	andi	r25, 0xE9	; 233
 4ce:	a9 2e       	mov	r10, r25
 4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4d2:	a2 fe       	sbrs	r10, 2
 4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d6:	b3 94       	inc	r11
 4d8:	b3 94       	inc	r11
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4dc:	8a 2d       	mov	r24, r10
 4de:	86 78       	andi	r24, 0x86	; 134
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e2:	b3 94       	inc	r11
 4e4:	a3 fc       	sbrc	r10, 3
 4e6:	11 c0       	rjmp	.+34     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4e8:	a0 fe       	sbrs	r10, 0
 4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4ec:	b2 14       	cp	r11, r2
 4ee:	88 f4       	brcc	.+34     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4f0:	28 0c       	add	r2, r8
 4f2:	92 2c       	mov	r9, r2
 4f4:	9b 18       	sub	r9, r11
 4f6:	0e c0       	rjmp	.+28     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4f8:	b2 14       	cp	r11, r2
 4fa:	60 f4       	brcc	.+24     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4fc:	b6 01       	movw	r22, r12
 4fe:	80 e2       	ldi	r24, 0x20	; 32
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 506:	b3 94       	inc	r11
 508:	f7 cf       	rjmp	.-18     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 50a:	b2 14       	cp	r11, r2
 50c:	18 f4       	brcc	.+6      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50e:	2b 18       	sub	r2, r11
 510:	02 c0       	rjmp	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 512:	98 2c       	mov	r9, r8
 514:	21 2c       	mov	r2, r1
 516:	a4 fe       	sbrs	r10, 4
 518:	10 c0       	rjmp	.+32     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 51a:	b6 01       	movw	r22, r12
 51c:	80 e3       	ldi	r24, 0x30	; 48
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 524:	a2 fe       	sbrs	r10, 2
 526:	17 c0       	rjmp	.+46     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 528:	a1 fc       	sbrc	r10, 1
 52a:	03 c0       	rjmp	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52c:	88 e7       	ldi	r24, 0x78	; 120
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 532:	88 e5       	ldi	r24, 0x58	; 88
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	b6 01       	movw	r22, r12
 538:	0c c0       	rjmp	.+24     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 53a:	8a 2d       	mov	r24, r10
 53c:	86 78       	andi	r24, 0x86	; 134
 53e:	59 f0       	breq	.+22     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 540:	a1 fe       	sbrs	r10, 1
 542:	02 c0       	rjmp	.+4      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 544:	8b e2       	ldi	r24, 0x2B	; 43
 546:	01 c0       	rjmp	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 548:	80 e2       	ldi	r24, 0x20	; 32
 54a:	a7 fc       	sbrc	r10, 7
 54c:	8d e2       	ldi	r24, 0x2D	; 45
 54e:	b6 01       	movw	r22, r12
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 556:	89 14       	cp	r8, r9
 558:	38 f4       	brcc	.+14     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 55a:	b6 01       	movw	r22, r12
 55c:	80 e3       	ldi	r24, 0x30	; 48
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 564:	9a 94       	dec	r9
 566:	f7 cf       	rjmp	.-18     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 568:	8a 94       	dec	r8
 56a:	f3 01       	movw	r30, r6
 56c:	e8 0d       	add	r30, r8
 56e:	f1 1d       	adc	r31, r1
 570:	80 81       	ld	r24, Z
 572:	b6 01       	movw	r22, r12
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 57a:	81 10       	cpse	r8, r1
 57c:	f5 cf       	rjmp	.-22     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 57e:	22 20       	and	r2, r2
 580:	09 f4       	brne	.+2      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 582:	42 ce       	rjmp	.-892    	; 0x208 <vfprintf+0x24>
 584:	b6 01       	movw	r22, r12
 586:	80 e2       	ldi	r24, 0x20	; 32
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <fputc>
 58e:	2a 94       	dec	r2
 590:	f6 cf       	rjmp	.-20     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 592:	f6 01       	movw	r30, r12
 594:	86 81       	ldd	r24, Z+6	; 0x06
 596:	97 81       	ldd	r25, Z+7	; 0x07
 598:	02 c0       	rjmp	.+4      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	9f ef       	ldi	r25, 0xFF	; 255
 59e:	2b 96       	adiw	r28, 0x0b	; 11
 5a0:	e2 e1       	ldi	r30, 0x12	; 18
 5a2:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__epilogue_restores__>

000005a6 <strnlen_P>:
 5a6:	fc 01       	movw	r30, r24
 5a8:	05 90       	lpm	r0, Z+
 5aa:	61 50       	subi	r22, 0x01	; 1
 5ac:	70 40       	sbci	r23, 0x00	; 0
 5ae:	01 10       	cpse	r0, r1
 5b0:	d8 f7       	brcc	.-10     	; 0x5a8 <strnlen_P+0x2>
 5b2:	80 95       	com	r24
 5b4:	90 95       	com	r25
 5b6:	8e 0f       	add	r24, r30
 5b8:	9f 1f       	adc	r25, r31
 5ba:	08 95       	ret

000005bc <strnlen>:
 5bc:	fc 01       	movw	r30, r24
 5be:	61 50       	subi	r22, 0x01	; 1
 5c0:	70 40       	sbci	r23, 0x00	; 0
 5c2:	01 90       	ld	r0, Z+
 5c4:	01 10       	cpse	r0, r1
 5c6:	d8 f7       	brcc	.-10     	; 0x5be <strnlen+0x2>
 5c8:	80 95       	com	r24
 5ca:	90 95       	com	r25
 5cc:	8e 0f       	add	r24, r30
 5ce:	9f 1f       	adc	r25, r31
 5d0:	08 95       	ret

000005d2 <fputc>:
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	fb 01       	movw	r30, r22
 5dc:	23 81       	ldd	r18, Z+3	; 0x03
 5de:	21 fd       	sbrc	r18, 1
 5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <fputc+0x16>
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	9f ef       	ldi	r25, 0xFF	; 255
 5e6:	2c c0       	rjmp	.+88     	; 0x640 <fputc+0x6e>
 5e8:	22 ff       	sbrs	r18, 2
 5ea:	16 c0       	rjmp	.+44     	; 0x618 <fputc+0x46>
 5ec:	46 81       	ldd	r20, Z+6	; 0x06
 5ee:	57 81       	ldd	r21, Z+7	; 0x07
 5f0:	24 81       	ldd	r18, Z+4	; 0x04
 5f2:	35 81       	ldd	r19, Z+5	; 0x05
 5f4:	42 17       	cp	r20, r18
 5f6:	53 07       	cpc	r21, r19
 5f8:	44 f4       	brge	.+16     	; 0x60a <fputc+0x38>
 5fa:	a0 81       	ld	r26, Z
 5fc:	b1 81       	ldd	r27, Z+1	; 0x01
 5fe:	9d 01       	movw	r18, r26
 600:	2f 5f       	subi	r18, 0xFF	; 255
 602:	3f 4f       	sbci	r19, 0xFF	; 255
 604:	31 83       	std	Z+1, r19	; 0x01
 606:	20 83       	st	Z, r18
 608:	8c 93       	st	X, r24
 60a:	26 81       	ldd	r18, Z+6	; 0x06
 60c:	37 81       	ldd	r19, Z+7	; 0x07
 60e:	2f 5f       	subi	r18, 0xFF	; 255
 610:	3f 4f       	sbci	r19, 0xFF	; 255
 612:	37 83       	std	Z+7, r19	; 0x07
 614:	26 83       	std	Z+6, r18	; 0x06
 616:	14 c0       	rjmp	.+40     	; 0x640 <fputc+0x6e>
 618:	8b 01       	movw	r16, r22
 61a:	ec 01       	movw	r28, r24
 61c:	fb 01       	movw	r30, r22
 61e:	00 84       	ldd	r0, Z+8	; 0x08
 620:	f1 85       	ldd	r31, Z+9	; 0x09
 622:	e0 2d       	mov	r30, r0
 624:	09 95       	icall
 626:	89 2b       	or	r24, r25
 628:	e1 f6       	brne	.-72     	; 0x5e2 <fputc+0x10>
 62a:	d8 01       	movw	r26, r16
 62c:	16 96       	adiw	r26, 0x06	; 6
 62e:	8d 91       	ld	r24, X+
 630:	9c 91       	ld	r25, X
 632:	17 97       	sbiw	r26, 0x07	; 7
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	17 96       	adiw	r26, 0x07	; 7
 638:	9c 93       	st	X, r25
 63a:	8e 93       	st	-X, r24
 63c:	16 97       	sbiw	r26, 0x06	; 6
 63e:	ce 01       	movw	r24, r28
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	0f 91       	pop	r16
 648:	08 95       	ret

0000064a <__ultoa_invert>:
 64a:	fa 01       	movw	r30, r20
 64c:	aa 27       	eor	r26, r26
 64e:	28 30       	cpi	r18, 0x08	; 8
 650:	51 f1       	breq	.+84     	; 0x6a6 <__ultoa_invert+0x5c>
 652:	20 31       	cpi	r18, 0x10	; 16
 654:	81 f1       	breq	.+96     	; 0x6b6 <__ultoa_invert+0x6c>
 656:	e8 94       	clt
 658:	6f 93       	push	r22
 65a:	6e 7f       	andi	r22, 0xFE	; 254
 65c:	6e 5f       	subi	r22, 0xFE	; 254
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	af 4f       	sbci	r26, 0xFF	; 255
 666:	b1 e0       	ldi	r27, 0x01	; 1
 668:	3e d0       	rcall	.+124    	; 0x6e6 <__ultoa_invert+0x9c>
 66a:	b4 e0       	ldi	r27, 0x04	; 4
 66c:	3c d0       	rcall	.+120    	; 0x6e6 <__ultoa_invert+0x9c>
 66e:	67 0f       	add	r22, r23
 670:	78 1f       	adc	r23, r24
 672:	89 1f       	adc	r24, r25
 674:	9a 1f       	adc	r25, r26
 676:	a1 1d       	adc	r26, r1
 678:	68 0f       	add	r22, r24
 67a:	79 1f       	adc	r23, r25
 67c:	8a 1f       	adc	r24, r26
 67e:	91 1d       	adc	r25, r1
 680:	a1 1d       	adc	r26, r1
 682:	6a 0f       	add	r22, r26
 684:	71 1d       	adc	r23, r1
 686:	81 1d       	adc	r24, r1
 688:	91 1d       	adc	r25, r1
 68a:	a1 1d       	adc	r26, r1
 68c:	20 d0       	rcall	.+64     	; 0x6ce <__ultoa_invert+0x84>
 68e:	09 f4       	brne	.+2      	; 0x692 <__ultoa_invert+0x48>
 690:	68 94       	set
 692:	3f 91       	pop	r19
 694:	2a e0       	ldi	r18, 0x0A	; 10
 696:	26 9f       	mul	r18, r22
 698:	11 24       	eor	r1, r1
 69a:	30 19       	sub	r19, r0
 69c:	30 5d       	subi	r19, 0xD0	; 208
 69e:	31 93       	st	Z+, r19
 6a0:	de f6       	brtc	.-74     	; 0x658 <__ultoa_invert+0xe>
 6a2:	cf 01       	movw	r24, r30
 6a4:	08 95       	ret
 6a6:	46 2f       	mov	r20, r22
 6a8:	47 70       	andi	r20, 0x07	; 7
 6aa:	40 5d       	subi	r20, 0xD0	; 208
 6ac:	41 93       	st	Z+, r20
 6ae:	b3 e0       	ldi	r27, 0x03	; 3
 6b0:	0f d0       	rcall	.+30     	; 0x6d0 <__ultoa_invert+0x86>
 6b2:	c9 f7       	brne	.-14     	; 0x6a6 <__ultoa_invert+0x5c>
 6b4:	f6 cf       	rjmp	.-20     	; 0x6a2 <__ultoa_invert+0x58>
 6b6:	46 2f       	mov	r20, r22
 6b8:	4f 70       	andi	r20, 0x0F	; 15
 6ba:	40 5d       	subi	r20, 0xD0	; 208
 6bc:	4a 33       	cpi	r20, 0x3A	; 58
 6be:	18 f0       	brcs	.+6      	; 0x6c6 <__ultoa_invert+0x7c>
 6c0:	49 5d       	subi	r20, 0xD9	; 217
 6c2:	31 fd       	sbrc	r19, 1
 6c4:	40 52       	subi	r20, 0x20	; 32
 6c6:	41 93       	st	Z+, r20
 6c8:	02 d0       	rcall	.+4      	; 0x6ce <__ultoa_invert+0x84>
 6ca:	a9 f7       	brne	.-22     	; 0x6b6 <__ultoa_invert+0x6c>
 6cc:	ea cf       	rjmp	.-44     	; 0x6a2 <__ultoa_invert+0x58>
 6ce:	b4 e0       	ldi	r27, 0x04	; 4
 6d0:	a6 95       	lsr	r26
 6d2:	97 95       	ror	r25
 6d4:	87 95       	ror	r24
 6d6:	77 95       	ror	r23
 6d8:	67 95       	ror	r22
 6da:	ba 95       	dec	r27
 6dc:	c9 f7       	brne	.-14     	; 0x6d0 <__ultoa_invert+0x86>
 6de:	00 97       	sbiw	r24, 0x00	; 0
 6e0:	61 05       	cpc	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	08 95       	ret
 6e6:	9b 01       	movw	r18, r22
 6e8:	ac 01       	movw	r20, r24
 6ea:	0a 2e       	mov	r0, r26
 6ec:	06 94       	lsr	r0
 6ee:	57 95       	ror	r21
 6f0:	47 95       	ror	r20
 6f2:	37 95       	ror	r19
 6f4:	27 95       	ror	r18
 6f6:	ba 95       	dec	r27
 6f8:	c9 f7       	brne	.-14     	; 0x6ec <__ultoa_invert+0xa2>
 6fa:	62 0f       	add	r22, r18
 6fc:	73 1f       	adc	r23, r19
 6fe:	84 1f       	adc	r24, r20
 700:	95 1f       	adc	r25, r21
 702:	a0 1d       	adc	r26, r0
 704:	08 95       	ret

00000706 <__prologue_saves__>:
 706:	2f 92       	push	r2
 708:	3f 92       	push	r3
 70a:	4f 92       	push	r4
 70c:	5f 92       	push	r5
 70e:	6f 92       	push	r6
 710:	7f 92       	push	r7
 712:	8f 92       	push	r8
 714:	9f 92       	push	r9
 716:	af 92       	push	r10
 718:	bf 92       	push	r11
 71a:	cf 92       	push	r12
 71c:	df 92       	push	r13
 71e:	ef 92       	push	r14
 720:	ff 92       	push	r15
 722:	0f 93       	push	r16
 724:	1f 93       	push	r17
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
 72e:	ca 1b       	sub	r28, r26
 730:	db 0b       	sbc	r29, r27
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	de bf       	out	0x3e, r29	; 62
 738:	0f be       	out	0x3f, r0	; 63
 73a:	cd bf       	out	0x3d, r28	; 61
 73c:	09 94       	ijmp

0000073e <__epilogue_restores__>:
 73e:	2a 88       	ldd	r2, Y+18	; 0x12
 740:	39 88       	ldd	r3, Y+17	; 0x11
 742:	48 88       	ldd	r4, Y+16	; 0x10
 744:	5f 84       	ldd	r5, Y+15	; 0x0f
 746:	6e 84       	ldd	r6, Y+14	; 0x0e
 748:	7d 84       	ldd	r7, Y+13	; 0x0d
 74a:	8c 84       	ldd	r8, Y+12	; 0x0c
 74c:	9b 84       	ldd	r9, Y+11	; 0x0b
 74e:	aa 84       	ldd	r10, Y+10	; 0x0a
 750:	b9 84       	ldd	r11, Y+9	; 0x09
 752:	c8 84       	ldd	r12, Y+8	; 0x08
 754:	df 80       	ldd	r13, Y+7	; 0x07
 756:	ee 80       	ldd	r14, Y+6	; 0x06
 758:	fd 80       	ldd	r15, Y+5	; 0x05
 75a:	0c 81       	ldd	r16, Y+4	; 0x04
 75c:	1b 81       	ldd	r17, Y+3	; 0x03
 75e:	aa 81       	ldd	r26, Y+2	; 0x02
 760:	b9 81       	ldd	r27, Y+1	; 0x01
 762:	ce 0f       	add	r28, r30
 764:	d1 1d       	adc	r29, r1
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	de bf       	out	0x3e, r29	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	ed 01       	movw	r28, r26
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
